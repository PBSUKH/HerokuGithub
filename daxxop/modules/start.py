from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from daxxop import daxxop as app
from config import BOT_USERNAME, OWNER_ID, LOGGER_ID
import config
from pyrogram.types import InputMediaVideo
import random 
from pyrogram.types import Message
import asyncio
#‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ
#‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ

# ------------------------------------
sticker_id = "CAACAgUAAx0CcmOuMwACFtFlt_PqlNHz9TeRS1Jak-CxUoL1bwACBAADwSQxMYnlHW4Ls8gQHgQ"
sticker_id2 = "CAACAgUAAx0CcmOuMwACFyBlt_bJUeDPNFU3_tLd09oJVn8OxQACFQEAAsiUZBRmRDCipxVsEx4E"

# ------------------------------------


start_txt = f"""**
 ú·¥á è ·¥õ ú·¥á Ä·¥á  …¥…™·¥Ñ·¥á ·¥õ·¥è ·¥ç·¥á·¥á·¥õ  è·¥è·¥ú !
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‡πèü§ñ ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥õ·¥è …¢…™·¥õ ú·¥ú ô &  ú·¥á Ä·¥è·¥ã·¥ú ·¥Ñ·¥è…¥·¥õ Ä·¥è ü  ô·¥è·¥õ
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‡πè·¥õ ú…™s  ô·¥è·¥õ s…™·¥ç·¥ò ü…™“ì…™·¥ás  è·¥è·¥ú Ä   
·¥Ö·¥á·¥†·¥á ü·¥è·¥ò·¥ç·¥á…¥·¥õ J·¥è·¥ú Ä…¥·¥á è  ô è …™…¥·¥õ·¥á…¢ Ä·¥Ä·¥õ…™…¥…¢ …¢…™·¥õ ú·¥ú ô  Ä·¥á·¥Ñ·¥á…™·¥†·¥á …™…¥s·¥õ·¥Ä…¥·¥õ …¢…™·¥õ ú·¥ú ô ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥ás ·¥Ä…¥·¥Ö ·¥ç·¥Ä…¥·¥Ä…¢·¥á  è·¥è·¥ú Ä  ú·¥á Ä·¥è·¥ã·¥ú
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‡πè·¥Ö·¥á·¥ò ü·¥è è·¥ç·¥á…¥·¥õs ·¥á“ì“ì·¥è Ä·¥õ ü·¥áss ü è
·¥õ è·¥ò·¥á /help ·¥õ·¥è ·¥áx·¥ò ü·¥è Ä·¥á ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös ·¥Ä…¥·¥Ö s·¥ú·¥ò·¥á Ä·¥Ñ ú·¥Ä Ä…¢·¥á  è·¥è·¥ú Ä ·¥°·¥è Ä·¥ã“ì ü·¥è·¥°.  ü·¥á·¥õ's ·¥ç·¥Ä·¥ã·¥á ·¥Ñ·¥è·¥Ö…™…¥…¢ ·¥Ä…¥·¥Ö ·¥Ö·¥á·¥ò ü·¥è è·¥ç·¥á…¥·¥õ ·¥Ä  ô Ä·¥á·¥á·¥¢·¥á! üíªüîß #…¢…™·¥õ ú·¥ú ô # ú·¥á Ä·¥è·¥ã·¥ú #·¥Ö·¥á·¥†·¥õ·¥è·¥è üs"
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
**"""

#---------------------

@app.on_message(filters.command("start"))
async def start(_, message):
    buttons = [
        [ 
          InlineKeyboardButton("‡πè·¥Ä·¥Ö·¥Ö ·¥ç·¥á …™…¥  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò‡πè", url=f"https://t.me/{BOT_USERNAME}?startgroup=true")
        ],
        [
          InlineKeyboardButton("‡πès·¥ú·¥ò·¥ò·¥è Ä·¥õ ·¥õ·¥á·¥Ä·¥ç‡πè", url="https://t.me/ll_THE_BAD_BOT_ll"),
          InlineKeyboardButton("‡πè·¥ç è ·¥Ö·¥á·¥† ü·¥è·¥ò·¥á Ä‡πè", user_id=config.OWNER_ID)
        ],
        [
          InlineKeyboardButton("‡πè ô·¥è·¥õ “ì·¥á·¥Ä·¥õ·¥ú Ä·¥ás‡πè", callback_data="settings_back_helper"),
          InlineKeyboardButton("‡πè ô·¥è·¥õ ·¥Ñ·¥è·¥Ö·¥ás‡πè", callback_data="new_callback_data")
        ]]
    
    reply_markup = InlineKeyboardMarkup(buttons)

    command_parameter = message.command[1] if len(message.command) > 1 else None
    if command_parameter == "help":
        await help_handler(_, message)
    else:
        sticker_message = await message.reply_sticker(sticker=sticker_id)

        await message.reply_photo(
            photo="https://graph.org/file/726169835ed7cdfd5ccf4.jpg",
            caption=start_txt,
            reply_markup=reply_markup
        )
        await sticker_message.delete()
# ----------------------------

#-------------------------------



@app.on_message(filters.private & filters.command('help'))
async def help_handler(_, message):
    help_text = (
        "**‡πè·¥Ñ ú·¥è·¥ès·¥á ·¥õ ú·¥á ·¥Ñ·¥Ä·¥õ·¥á…¢·¥è Ä è “ì·¥è Ä ·¥° ú…™·¥Ñ ú  è·¥è·¥ú ·¥°·¥Ä…¥…¥·¥Ä …¢·¥á·¥õ  ú·¥á ü·¥©.**"
        "**·¥Äs·¥ã  è·¥è·¥ú Ä ·¥Ö·¥è·¥ú ô·¥õs ·¥Ä·¥õ s·¥ú·¥ò·¥ò·¥è Ä·¥õ** \n\n **·¥Ä ü ü ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös ·¥Ñ·¥Ä…¥  ô·¥á ·¥ús·¥á·¥Ö ·¥°…™·¥õ ú ‡πè: /**"
    )
    
    buttons = [
        [
            InlineKeyboardButton("‡πè…¢…™·¥õ ú·¥ú ô‡πè", callback_data="githelp"),
            InlineKeyboardButton("‡πè·¥Ä…™‡πè", callback_data="aihelp"),
            InlineKeyboardButton("‡πè ú·¥á Ä·¥è·¥ã·¥ú‡πè", callback_data="herokuhelp")
        ],
        [
            InlineKeyboardButton("‡πè·¥õ·¥è·¥è üs‡πè", callback_data="toolhelp"),
            InlineKeyboardButton("‡πè…™…¥“ì·¥è‡πè", callback_data="infohelp"),
            InlineKeyboardButton("‡πè·¥Ö·¥á·¥† ·¥õ·¥è·¥è üs‡πè", callback_data="devhelp")
        ],
        
        [
            InlineKeyboardButton("‡πè·¥Ñ ü·¥ès·¥á‡πè", callback_data="close_data")
        ]
    ]
  
    reply_markup = InlineKeyboardMarkup(buttons)
    await message.reply_text(help_text, reply_markup=reply_markup)

#------------------------------------------------------------------------------------
@app.on_message(filters.command(["help"]) & filters.group)
async def help_command(_, message):
    start_button_link = f"https://t.me/{BOT_USERNAME}?start=help"
    caption = "‡πè ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ ·¥õ ú·¥á  ô·¥ú·¥õ·¥õ·¥è…¥  ô·¥á ü·¥è·¥° ·¥õ·¥è …¢·¥á·¥õ ·¥ç è  ú·¥á ü·¥ò ·¥ç·¥á…¥·¥ú …™…¥  è·¥è·¥ú Ä ·¥ò·¥ç "

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton("‡πè ú·¥á ü·¥ò‡πè", url=start_button_link)],
        ]
    )
    sticker_message = await message.reply_sticker(sticker=sticker_id2)

    await message.reply_text(caption, reply_markup=keyboard)


#-------------------------------------------------

@app.on_message(filters.private & filters.incoming)
async def on_pm_s(client: Client, message: Message):
    if not message.from_user.id ==OWNER_ID:
        fwded_mesg = await message.forward(chat_id=OWNER_ID, disable_notification=True)

       

glink = 'https://t.me/II_CHAT_HUB_II'


@app.on_callback_query()
async def callback_query_handler(_, query):
    if query.data == 'close_data':
        chat_id = query.message.chat.id
        await query.message.delete()
    elif query.data == 'settings_back_helper':
        buttons = [
            [
                InlineKeyboardButton("‡πè…¢…™·¥õ ú·¥ú ô‡πè", callback_data="githelp"),
                InlineKeyboardButton("‡πè·¥Ä…™‡πè", callback_data="aihelp"),
                InlineKeyboardButton("‡πè ú·¥á Ä·¥è·¥ã·¥ú‡πè", callback_data="herokuhelp")
            ],
            [
                InlineKeyboardButton("‡πè·¥õ·¥è·¥è üs‡πè", callback_data="toolhelp"),
                InlineKeyboardButton("‡πè…™…¥“ì·¥è‡πè", callback_data="infohelp"),
                InlineKeyboardButton("‡πè·¥Ö·¥á·¥† ·¥õ·¥è·¥è üs‡πè", callback_data="devhelp")
            ],
            [
                InlineKeyboardButton("‡πè ô·¥Ä·¥Ñ·¥ã‡πè", callback_data="back_help")
            ]
        ]

        help_text = (
            "**‡πè·¥Ñ ú·¥è·¥ès·¥á ·¥õ ú·¥á ·¥Ñ·¥Ä·¥õ·¥á…¢·¥è Ä è “ì·¥è Ä ·¥° ú…™·¥Ñ ú  è·¥è·¥ú ·¥°·¥Ä…¥…¥·¥Ä …¢·¥á·¥õ  ú·¥á ü·¥©.**"
            "**·¥Äs·¥ã  è·¥è·¥ú Ä ·¥Ö·¥è·¥ú ô·¥õs ·¥Ä·¥õ s·¥ú·¥ò·¥ò·¥è Ä·¥õ** \n\n **·¥Ä ü ü ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös ·¥Ñ·¥Ä…¥  ô·¥á ·¥ús·¥á·¥Ö ·¥°…™·¥õ ú ‡πè: /**"
        )
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(help_text, reply_markup=reply_markup)

    elif query.data == 'back_help':
        start_txt = (
            "** ú·¥á è ·¥õ ú·¥á Ä·¥á  …¥…™·¥Ñ·¥á ·¥õ·¥è ·¥ç·¥á·¥á·¥õ  è·¥è·¥ú !**\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            "**‡πèü§ñ ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥õ·¥è …¢…™·¥õ ú·¥ú ô &  ú·¥á Ä·¥è·¥ã·¥ú ·¥Ñ·¥è…¥·¥õ Ä·¥è ü  ô·¥è·¥õ**\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            "**‡πè·¥õ ú…™s  ô·¥è·¥õ s…™·¥ç·¥ò ü…™“ì…™·¥ás  è·¥è·¥ú Ä**\n"
            "**·¥Ö·¥á·¥†·¥á ü·¥è·¥ò·¥ç·¥á…¥·¥õ J·¥è·¥ú Ä…¥·¥á è  ô è …™…¥·¥õ·¥á…¢ Ä·¥Ä·¥õ…™…¥…¢ …¢…™·¥õ ú·¥ú ô  Ä·¥á·¥Ñ·¥á…™·¥†·¥á …™…¥s·¥õ·¥Ä…¥·¥õ …¢…™·¥õ ú·¥ú ô ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥ás ·¥Ä…¥·¥Ö ·¥ç·¥Ä…¥·¥Ä…¢·¥á  è·¥è·¥ú Ä  ú·¥á Ä·¥è·¥ã·¥ú**\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            "**‡πè·¥Ö·¥á·¥ò ü·¥è è·¥ç·¥á…¥·¥õs ·¥á“ì“ì·¥è Ä·¥õ ü·¥áss ü è**\n"
            "**·¥õ è·¥ò·¥á /help ·¥õ·¥è ·¥áx·¥ò ü·¥è Ä·¥á ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös ·¥Ä…¥·¥Ö s·¥ú·¥ò·¥á Ä·¥Ñ ú·¥Ä Ä…¢·¥á  è·¥è·¥ú Ä ·¥°·¥è Ä·¥ã“ì ü·¥è·¥°.  ü·¥á·¥õ's ·¥ç·¥Ä·¥ã·¥á ·¥Ñ·¥è·¥Ö…™…¥…¢ ·¥Ä…¥·¥Ö ·¥Ö·¥á·¥ò ü·¥è è·¥ç·¥á…¥·¥õ ·¥Ä  ô Ä·¥á·¥á·¥¢·¥á! üíªüîß #…¢…™·¥õ ú·¥ú ô # ú·¥á Ä·¥è·¥ã·¥ú #·¥Ö·¥á·¥†·¥õ·¥è·¥è üs**\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        )
        buttons = [
            [ 
              InlineKeyboardButton("‡πè·¥Ä·¥Ö·¥Ö ·¥ç·¥á …™…¥  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò‡πè", url=f"https://t.me/{BOT_USERNAME}?startgroup=true")
            ],
            [
              InlineKeyboardButton("‡πès·¥ú·¥ò·¥ò·¥è Ä·¥õ ·¥õ·¥á·¥Ä·¥ç‡πè", url="https://t.me/ll_THE_BAD_BOT_ll"),
              InlineKeyboardButton("‡πè·¥ç è ·¥Ö·¥á·¥† ü·¥è·¥ò·¥á Ä‡πè", user_id=config.OWNER_ID)
            ],
            [
              InlineKeyboardButton("‡πè ô·¥è·¥õ “ì·¥á·¥Ä·¥õ·¥ú Ä·¥ás‡πè", callback_data="settings_back_helper"),
              InlineKeyboardButton("‡πè ô·¥è·¥õ ·¥Ñ·¥è·¥Ö·¥ás‡πè", callback_data="new_callback_data")
            ]
        ]
    
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(start_txt, reply_markup=reply_markup)


    elif query.data == 'new_callback_data':
        await query.message.edit_media(
            media=InputMediaVideo("https://telegra.ph/file/c7e9398f36154ff33db75.mp4", has_spoiler=True),
            reply_markup=InlineKeyboardMarkup(
                [
                    [InlineKeyboardButton(text="‡πè  ô·¥Ä·¥Ñ·¥ã ‡πè", callback_data="back_help")]
                ]
            ),
        )
    elif query.data == 'githelp':
        ghelp_text = (
            "‡πè …¢…™·¥õ ú·¥ú ô &  ú·¥á Ä·¥è·¥ã·¥ú ·¥Ñ·¥è…¥·¥õ Ä·¥è ü  ô·¥è·¥õ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös ‡πè\n"
            "‚û™/start - s·¥õ·¥Ä Ä·¥õ ·¥õ ú·¥á  ô·¥è·¥õ \n"
            "‚û™/help -  D…™s·¥ò ü·¥Ä è ·¥õ ú…™s  ú·¥á ü·¥ò ·¥ç·¥áss·¥Ä…¢·¥á\n"
            "‚û™/allrepo - L…™s·¥õ  è·¥è·¥ú Ä G…™·¥õH·¥ú ô  Ä·¥á·¥ò·¥ès…™·¥õ·¥è Ä…™·¥ás ·¥ús·¥á /allrepo Badhacker98\n"
            "‚û™/create_repo - C Ä·¥á·¥Ä·¥õ·¥á ·¥Ä …¥·¥á·¥° G…™·¥õH·¥ú ô  Ä·¥á·¥ò·¥ès…™·¥õ·¥è Ä è\n"
            "‚û™/delrepo - D·¥á ü·¥á·¥õ·¥á ·¥Ä G…™·¥õH·¥ú ô  Ä·¥á·¥ò·¥ès…™·¥õ·¥è Ä è\n"
            "‚û™/add_collaborator - A·¥Ö·¥Ö ·¥Ä ·¥Ñ·¥è ü ü·¥Ä ô·¥è Ä·¥Ä·¥õ·¥è Ä ·¥õ·¥è ·¥Ä G…™·¥õH·¥ú ô  Ä·¥á·¥ò·¥ès…™·¥õ·¥è Ä è\n"
            "‚û™/remove_collaborator - R·¥á·¥ç·¥è·¥†·¥á ·¥Ä ·¥Ñ·¥è ü ü·¥Ä ô·¥è Ä·¥Ä·¥õ·¥è Ä “ì Ä·¥è·¥ç ·¥Ä G…™·¥õH·¥ú ô  Ä·¥á·¥ò·¥ès…™·¥õ·¥è Ä è\n"
            "‚û™/delrepo - D·¥á ü·¥á·¥õ·¥á ·¥Ä  Ä·¥á·¥ò·¥ès…™·¥õ·¥è Ä è\n"
            "‚û™/downloadrepo - D·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ·¥Ä  Ä·¥á·¥ò·¥ès…™·¥õ·¥è Ä è\n"
            "‚û™/fork - F·¥è Ä·¥ã ·¥Ä  Ä·¥á·¥ò·¥ès…™·¥õ·¥è Ä è\n"
            "‚û™/forkall - F·¥è Ä·¥ã ·¥Ä ü ü  Ä·¥á·¥ò·¥ès…™·¥õ·¥è Ä…™·¥ás\n"
            "‚û™/gitpublic - Git public operations\n"
            "‚û™/gitprivate - Git private operations"
        )
        
        buttons = [
            [
                InlineKeyboardButton("‡πè ô·¥Ä·¥Ñ·¥ã‡πè", callback_data="settings_back_helper")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(buttons)
        
        await query.message.edit_text(ghelp_text, reply_markup=reply_markup)

    elif query.data == 'aihelp':
        aihelp_text = (
            "‚û™/assis - C ú·¥Ä·¥õGPT ·¥†·¥è…™·¥Ñ·¥á  Ä·¥á·¥ò ü è\n"
            "‚û™/bingsearch - B…™…¥…¢ s·¥á·¥Ä Ä·¥Ñ ú “ì·¥ú…¥·¥Ñ·¥õ…™·¥è…¥·¥Ä ü…™·¥õ è\n"
            "‚û™/chatgpt /ai /ask - I…¥·¥†·¥è·¥ã·¥á C ú·¥Ä·¥õGPT “ì·¥è Ä ·¥õ·¥áx·¥õ- ô·¥Äs·¥á·¥Ö …™…¥·¥õ·¥á Ä·¥Ä·¥Ñ·¥õ…™·¥è…¥"              
       )
        
        buttons = [
            [
                InlineKeyboardButton("‡πè ô·¥Ä·¥Ñ·¥ã‡πè", callback_data="settings_back_helper")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(buttons)        
        await query.message.edit_text(aihelp_text, reply_markup=reply_markup)

    elif query.data == 'herokuhelp':
        herokuhelp_text = (
            "‚û™/restartdynos - R·¥ás·¥õ·¥Ä Ä·¥õ ·¥Ö è…¥·¥ès\n"
            "‚û™/apps - L…™s·¥õ ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ·¥Ä·¥ò·¥ò ü…™·¥Ñ·¥Ä·¥õ…™·¥è…¥s\n"
            "‚û™/veriable - V·¥Ä Ä…™·¥Ä ô ü·¥á- Ä·¥á ü·¥Ä·¥õ·¥á·¥Ö ·¥è·¥ò·¥á Ä·¥Ä·¥õ…™·¥è…¥s\n"
            "‚û™/herokulogs - V…™·¥á·¥° H·¥á Ä·¥è·¥ã·¥ú  ü·¥è…¢s\n"
            "‚û™/herokuinfo - G·¥á·¥õ H·¥á Ä·¥è·¥ã·¥ú ·¥Ä·¥ò·¥ò ü…™·¥Ñ·¥Ä·¥õ…™·¥è…¥ …™…¥“ì·¥è\n"
            "‚û™/delheroku - D·¥á ü·¥á·¥õ·¥á ·¥Ä H·¥á Ä·¥è·¥ã·¥ú ·¥Ä·¥ò·¥ò ü…™·¥Ñ·¥Ä·¥õ…™·¥è…¥\n"
            "‚û™/addapp - A·¥Ö·¥Ö ·¥Ä …¥·¥á·¥° ·¥Ñ·¥è ü ü·¥Ä ô·¥è Ä·¥Ä·¥õ…™·¥è…¥\n"                   
        )
           
        buttons = [
            [
                InlineKeyboardButton("‡πè ô·¥Ä·¥Ñ·¥ã‡πè", callback_data="settings_back_helper")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(buttons)  
        await query.message.edit_text(herokuhelp_text, reply_markup=reply_markup)

    elif query.data == 'toolhelp':
        toolhelp_text = (
            "‚û™/table - G·¥á…¥·¥á Ä·¥Ä·¥õ·¥á ·¥Ä ·¥õ·¥Ä ô ü·¥á\n"
            "‚û™/telegraph /tgm - ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç  ü…™…¥·¥ã …¢·¥á…¥·¥á Ä·¥Ä·¥õ·¥á\n" 
            "‚û™/ping - Check network connectivity"
        )
        
        buttons = [
            [
                InlineKeyboardButton("‡πè ô·¥Ä·¥Ñ·¥ã‡πè", callback_data="settings_back_helper")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(toolhelp_text, reply_markup=reply_markup)

    elif query.data == 'devhelp':
        devhelp_text = (
            "‚û™/html - HTML- Ä·¥á ü·¥Ä·¥õ·¥á·¥Ö ·¥è·¥ò·¥á Ä·¥Ä·¥õ…™·¥è…¥s ·¥°·¥á ôs…™·¥õ·¥á ·¥Ö ü\n"
            "‚û™/pypi - P è·¥õ ú·¥è…¥ P·¥Ä·¥Ñ·¥ã·¥Ä…¢·¥á I…¥·¥Ö·¥áx ·¥è·¥ò·¥á Ä·¥Ä·¥õ…™·¥è…¥s\n"
            "‚û™/leavegroup - L·¥á·¥Ä·¥†·¥á ·¥Ä T·¥á ü·¥á…¢ Ä·¥Ä·¥ç …¢ Ä·¥è·¥ú·¥ò\n"              
        )
  
        buttons = [
            [
                InlineKeyboardButton("‡πè ô·¥Ä·¥Ñ·¥ã‡πè", callback_data="settings_back_helper")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(buttons)     
        await query.message.edit_text(devhelp_text, reply_markup=reply_markup)

    elif query.data == 'infohelp':
        infohelp_text = (
            "‚û™/github /git - G…™·¥õH·¥ú ô-R·¥á ü·¥Ä·¥õ·¥á·¥Ö O·¥ò·¥á Ä·¥Ä·¥õ…™·¥è…¥s\n"
            "‚û™/id - Us·¥á Ä ID I…¥“ì·¥è\n"  
            "‚û™/op - Ex·¥á·¥Ñ·¥ú·¥õ·¥á ·¥Ä…¥ O·¥ò·¥á Ä·¥Ä·¥õ…™·¥è…¥\n"
            "‚û™/sh - S ú·¥á ü ü/C·¥è·¥ç·¥ç·¥Ä…¥·¥Ö L…™…¥·¥á O·¥ò·¥á Ä·¥Ä·¥õ…™·¥è…¥s"
        )
        
        buttons = [
            [
                InlineKeyboardButton("‡πè ô·¥Ä·¥Ñ·¥ã‡πè", callback_data="settings_back_helper")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(infohelp_text, reply_markup=reply_markup)
